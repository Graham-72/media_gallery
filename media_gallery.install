<?php

/**
 * @file
 * Install file for media_gallery. Includes field and instance definitions.
 */

/**
 * Implements hook_enable().
 */
function media_gallery_enable() {
  // Work around http://drupal.org/node/727876. (See also
  // http://drupal.org/node/882364.)
  //field_associate_fields('taxonomy');
}

/**
 * Implements hook_install().
 */
function media_gallery_install() {
  // Adjust bundle settings for the media gallery content type.
  $bundle_settings = field_bundle_settings('node', 'media_gallery');
  // Enable the gallery block and full view modes.
  $bundle_settings['view_modes']['media_gallery_block']['custom_settings'] = TRUE;
  $bundle_settings['view_modes']['full']['custom_settings'] = TRUE;
  // Adjust the "Add image link" extra field so that it only displays on the
  // full node view, with the correct weight relative to the other fields. In
  // particular, we put it directly after the 'media_gallery_description'
  // field; see _media_gallery_controlled_instances().
  $bundle_settings['extra_fields']['display']['add_images_link']['full']['weight'] = 1;
  $bundle_settings['extra_fields']['display']['add_images_link']['full']['visible'] = TRUE;
  $bundle_settings['extra_fields']['display']['add_images_link']['default']['visible'] = FALSE;
  $bundle_settings['extra_fields']['display']['add_images_link']['teaser']['visible'] = FALSE;
  $bundle_settings['extra_fields']['display']['add_images_link']['media_gallery_block']['visible'] = FALSE;
  
  // If we don't do this, it will throw E_NOTICE errors during install.
  // Don't ask me why I don't care anymore.
  foreach ($bundle_settings['extra_fields']['display']['add_images_link'] as $name => $view_mode) {
    $bundle_settings['extra_fields']['display']['add_images_link'][$name]['weight'] = 1;
  }
  
  // Save the new bundle settings.
  field_bundle_settings('node', 'media_gallery', $bundle_settings);

  // Set the "Gallery Thumbnail", "Gallery Lightbox", and "Gallery Detail" view
  // modes to be enabled for image bundles and default the image bundle's file
  // field display appropriately. Do this before creating new field instances in
  // media entity bundles.
  $bundle_settings = field_bundle_settings('media', 'image');
  $bundle_settings['view_modes']['media_gallery_thumbnail']['custom_settings'] = TRUE;
  $bundle_settings['view_modes']['media_gallery_lightbox']['custom_settings'] = TRUE;
  $bundle_settings['view_modes']['media_gallery_detail']['custom_settings'] = TRUE;
  $bundle_settings['view_modes']['media_gallery_block_thumbnail']['custom_settings'] = TRUE;
  $bundle_settings['view_modes']['media_gallery_collection_thumbnail']['custom_settings'] = TRUE;
  field_bundle_settings('media', 'image', $bundle_settings);
  $instance = field_info_instance('media', 'file', 'image');
  $instance['display']['media_gallery_thumbnail'] = array('type' => 'styles_file_media_gallery_thumbnail', 'label' => 'hidden');
  $instance['display']['media_gallery_lightbox'] = array('type' => 'styles_file_large', 'label' => 'hidden');
  $instance['display']['media_gallery_detail'] = array('type' => 'styles_file_large', 'label' => 'hidden');
  $instance['display']['media_gallery_block_thumbnail'] = array('type' => 'styles_file_media_gallery_thumbnail', 'label' => 'hidden');
  $instance['display']['media_gallery_collection_thumbnail'] = array('type' => 'styles_file_media_gallery_thumbnail', 'label' => 'hidden');
  field_update_instance($instance);

  // Clear caches so that our implementation of hook_image_default_styles() is
  // correctly used when all the fields created below need it to be.
  // @todo There should obviously be a cleaner way to do this.
  cache_clear_all('*', 'cache', TRUE);
  drupal_static_reset('image_styles');
  drupal_static_reset('image_effects');
  drupal_static_reset('styles_presets');

  // Add the taxonomy vocabulary for media gallery collections.
  $vocabulary = media_gallery_create_taxonomy_vocab();

  // Make sure the standard 'field_tags' field exists.
  _media_gallery_ensure_field_tags();

  // Create fields (but not instances yet) for media_gallery nodes and
  // for the gallery collection vocabulary.
  foreach (_media_gallery_controlled_fields() as $field) {
    _media_gallery_ensure_field($field);
  }
  // Attach fields to gallery_collection taxonomy terms.
  foreach (_media_gallery_controlled_instances('taxonomy_term') as $instance) {
    _media_gallery_ensure_instance($instance);
  }

  // Now that the gallery_collection vocabulary exists and has fields attached,
  // create an "All galleries" term for galleries to belong to by default.
  media_gallery_create_taxonomy_term($vocabulary);

  // Attach fields to the media gallery node type (including a term reference
  // for the default collection).
  foreach (_media_gallery_controlled_instances('node') as $instance) {
    _media_gallery_ensure_instance($instance);
  }

  // Make sure all media bundles have the instances we expect.
  _media_gallery_ensure_media_instances();

  // Set variables for the media gallery node type.
  variable_set('node_submitted_media_gallery', FALSE);
  variable_set('node_options_media_gallery', array('status'));
  variable_set('comment_media_gallery', 0);
}

/**
 * Implements hook_requirements().
 */
function media_gallery_requirements() {
  $requirements = array();
  $t = get_t();

  $required_fields = _media_gallery_controlled_fields();
  // In addition to the fields we control, we also need the standard field_tags
  // that most sites will have gotten from their install profile.
  $required_fields['field_tags'] = array('type' => 'taxonomy_term_reference');
  
  foreach ($required_fields as $field_name => $field_definition) {
    $field = field_info_field($field_name);
    // If the field doesn't exist, we will create it on install.
    if (!$field) {
      continue;
    }
    if ($field['type'] != $field_definition['type']) {
      $requirements['existing_field_' . $field_name] = array(
        'description' => $t("%field_name already exists and is not of type %type. Installation cannot continue. Please remove this field or change its type.", array('%field_name' => $field_name, '%type' => $field_definition['type'])),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function media_gallery_schema() {
  $schema['media_gallery_weight'] = array(
    'description' => 'The weight of media galleries within a given collection.',
    'fields' => array(
      'tid' => array(
        'description' => 'The taxonomy term id corresponding to a media gallery collection.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The node id of the media gallery.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight' => array(
        'description' => 'The weight of the media gallery within the collection.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('tid', 'nid'),
  );
  return $schema;
}

/**
 * Returns definitions for fields this module both creates and deletes.
 */
function _media_gallery_controlled_fields() {
  $fields = array(
    // The media items that make up the gallery.
    'media_gallery_media' => array(
      'field_name' => 'media_gallery_media',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'locked' => TRUE,
      'type' => 'media',
    ),
    // The gallery description.
    'media_gallery_description' => array(
      'field_name' => 'media_gallery_description',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'text_long',
    ),
    // How to format the gallery (if links go to lightbox or node display).
    'media_gallery_format' => array(
      'field_name' => 'media_gallery_format',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_text',
      'settings' => array(
        'allowed_values_function' => '_media_gallery_get_format_values',
      ),
    ),
    // How many columns of thumbnails to show.
    'media_gallery_columns' => array(
      'field_name' => 'media_gallery_columns',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_number',
      'settings' => array(
        'allowed_values_function' => '_media_gallery_get_columns_values',
      ),
    ),
    // How many rows of thumbnails to show.
    'media_gallery_rows' => array(
      'field_name' => 'media_gallery_rows',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'number_integer',
    ),
    // Whether to show title/license on hover or below thumbnail.
    'media_gallery_image_info_where' => array(
      'field_name' => 'media_gallery_image_info_where',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_text',
      'settings' => array(
        'allowed_values_function' => '_media_gallery_get_image_info_placement_values',
      ),
    ),
    // What combination of title, and license to show with thumbnails.
    'media_gallery_image_info' => array(
      'field_name' => 'media_gallery_image_info',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_text',
      'settings' => array(
        'allowed_values_function' => '_media_gallery_get_image_info_values',
      ),
    ),
    // Whether to show a "Download original image" checkbox.
    'media_gallery_allow_download' => array(
      'field_name' => 'media_gallery_allow_download',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_boolean',
      'settings' => array(
        'allowed_values_function' => '_media_gallery_get_allow_download_values',
      ),
    ),
    // Whether to expose a block for this gallery.
    'media_gallery_expose_block' => array(
      'field_name' => 'media_gallery_expose_block',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_boolean',
      'settings' => array(
        'allowed_values_function' => '_media_gallery_get_expose_block_values',
      ),
    ),
    // How many columns of thumbnails to show in the block.
    'media_gallery_block_columns' => array(
      'field_name' => 'media_gallery_block_columns',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_number',
      'settings' => array(
        'allowed_values_function' => '_media_gallery_get_block_columns_values',
      ),
    ),
    // How many rows of thumbnails to show in the block.
    'media_gallery_block_rows' => array(
      'field_name' => 'media_gallery_block_rows',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'number_integer',
    ),
    'media_gallery_collection' => array(
      'field_name' => 'media_gallery_collection',
      'type' => 'taxonomy_term_reference',
      // Set cardinality to unlimited for tagging.
      'settings' => array(
        'allowed_values' => array(
          array(
            'vid' => variable_get('media_gallery_collection_vid'),
            'parent' => 0,
          ),
        ),
      ),
    ),
    // What combination of title and number of items to show with Galleries.
    'media_gallery_gallery_info' => array(
      'field_name' => 'media_gallery_gallery_info',
      'cardinality' => 1,
      'locked' => TRUE,
      'type' => 'list_text',
      'settings' => array(
        'allowed_values_function' => '_media_gallery_get_gallery_info_values',
      ),
    ),
    // Fields to create on media items.
    'media_description' => array(
      'field_name' => 'media_description',
      'locked' => TRUE,
      'type' => 'text_long',
      'translatable' => TRUE,
    ),
    'media_title' => array(
      'field_name' => 'media_title',
      'locked' => TRUE,
      'type' => 'text',
      'translatable' => TRUE,
    ),
    'field_license' => array(
      'field_name' => 'field_license',
      'locked' => TRUE,
      'translatable' => TRUE,
      'settings' => array(
        'allowed_values_function' => '_media_gallery_get_field_license_values',
      ),
      'type' => 'list_text',
      'active' => TRUE,
      'cardinality' => 1,
    ),
  );

  return $fields;
}

/**
 * Returns definitions for instances this modules both creates and deletes.
 *
 * @param $group
 *   Optional. The group of instances to return. May be 'node' or
 *   'taxonomy_term'. If omitted, returns all instances.
 *
 * @return
 *   A structured array of instances.
 */
function _media_gallery_controlled_instances($group = NULL) {
  $t = get_t();
  $node_instances = array(
    // The gallery description.
    'media_gallery_description' => array(
      'field_name' => 'media_gallery_description',
      'label' => $t('Description'),
      'widget' => array(
        'type' => 'text_textarea',
        'settings' => array('rows' => 4),
      ),
      'display' => array(
        'default' => array(
          'type' => 'text_default',
          'label' => 'hidden',
          'weight' => 0,
        ),
        'full' => array(
          'type' => 'text_default',
          'label' => 'hidden',
          'weight' => 0,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
          'weight' => 0,
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
          'weight' => 0,
        ),
      ),
    ),
    'media_gallery_media' => array(
      'field_name' => 'media_gallery_media',
      'label' => $t('Gallery images'),
      'widget' => array(
        'type' => 'media_generic',
        'settings' => array(
          // Eventually other media types will be allowed.
          'allowed_types' => array('image' => 'image'),
          'allowed_schemes' => array('public' => 'public'),
        ),
      ),
      'display' => array(
        'default' => array(
          'type' => 'media_gallery_thumbnail',
          'label' => 'hidden',
          'weight' => 2,
        ),
        'full' => array(
          'type' => 'media_gallery_thumbnail',
          'label' => 'hidden',
          'weight' => 2,
        ),
        'teaser' => array(
          'type' => 'media_gallery_collection_thumbnail',
          'label' => 'hidden',
          'weight' => 2,
        ),
        'media_gallery_block' => array(
          'type' => 'media_gallery_block_thumbnail',
          'label' => 'hidden',
          'weight' => 2,
        ),
      ),
    ),
    // How to format the gallery (if links go to lightbox or node display).
    'media_gallery_format' => array(
      'field_name' => 'media_gallery_format',
      'label' => $t('Gallery format'),
      'required' => TRUE,
      'default_value' => array(array('value' => 'lightbox')),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
      'widget' => array(
        'type' => 'options_buttons',
      ),
    ),
    // How many columns to show.
    'media_gallery_columns' => array(
      'field_name' => 'media_gallery_columns',
      'label' => $t('Number of columns'),
      'default_value' => array(array('value' => 4)),
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
    // How many rows to show.
    'media_gallery_rows' => array(
      'field_name' => 'media_gallery_rows',
      'label' => $t('Number of rows'),
      'default_value' => array(array('value' => 3)),
      'settings' => array(
        'min' => '1',
      ),
      'required' => TRUE,
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
    // Whether to show title/license on hover or below thumbnail.
    'media_gallery_image_info_where' => array(
      'field_name' => 'media_gallery_image_info_where',
      'label' => $t('Image information'),
      'required' => TRUE,
      'default_value' => array(array('value' => 'hover')),
      'widget' => array(
        'type' => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
    // What combination of title and license to show with thumbnails.
    'media_gallery_image_info' => array(
      'field_name' => 'media_gallery_image_info',
      'label' => $t('Image information displayed'),
      'required' => TRUE,
      'default_value' => array(array('value' => 'title')),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
    // Whether to show a "Download original image" checkbox.
    'media_gallery_allow_download' => array(
      'field_name' => 'media_gallery_allow_download',
      'label' => $t('Allow downloading of the original image'),
      'description' => $t('Display a "download original image" link'),
      'default_value' => array(array('value' => 1)),
      'widget' => array(
        'type' => 'options_onoff',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
    // Whether to expose a block for this gallery.
    'media_gallery_expose_block' => array(
      'field_name' => 'media_gallery_expose_block',
      'label' => $t('Create a block of most recently added media'),
      'default_value' => array(array('value' => 1)),
      'widget' => array(
        'type' => 'options_onoff',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
    // How many columns to show in the block.
    'media_gallery_block_columns' => array(
      'field_name' => 'media_gallery_block_columns',
      'label' => $t('Number of columns'),
      'default_value' => array(array('value' => 2)),
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
    // How many rows to show in the block.
    'media_gallery_block_rows' => array(
      'field_name' => 'media_gallery_block_rows',
      'label' => $t('Number of rows'),
      'default_value' => array(array('value' => 3)),
      'required' => TRUE,
      'settings' => array(
        'min' => 1,
      ),
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'full' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'media_gallery_block' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
    // The 'collection' tag field on media gallery nodes.
    'media_gallery_collection' => array(
      'field_name' => 'media_gallery_collection',
      'label' => $t('Gallery collection'),
      'default_value' => array(
        array(
          'tid' => variable_get('media_gallery_default_collection_tid'),
        ),
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'hidden',
        ),
      ),
    ),
  );
  foreach ($node_instances as &$instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'media_gallery';
  }
  unset($instance);

  $instances = array_intersect_key($node_instances, array_flip(array('media_gallery_columns', 'media_gallery_rows', 'media_gallery_image_info_where')));
  $instances['media_gallery_image_info_where']['label'] = $t('Gallery information');
  $instances['field_license'] = array(
    'field_name' => 'field_license',
    'label' => $t('Default license settings'),
    'required' => TRUE,
    'default_value' => array(
      array('value' => 'nothing'),
    ),
    'description' => $t('Choose a default <a href="http://creativecommons.org">@cc_link</a> license for all Gallery media. Later you can change each image\'s license.', array('@cc_link' => 'Creative Commons')),
    'weight' => 14,
    'display' => array(
      'default' => array(
        'type' => 'hidden',
        'label' => 'hidden',
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'hidden',
      ),
    ),
  );
  $instances['media_gallery_gallery_info'] = array(
    'field_name' => 'media_gallery_gallery_info',
    'label' => $t('Gallery information displayed'),
    'required' => TRUE,
    'default_value' => array(
      array('value' => 'title_num'),
    ),
    'display' => array(
      'default' => array(
        'type' => 'hidden',
        'label' => 'hidden',
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'hidden',
      ),
    ),
  );

  foreach ($instances as $key => $instance) {
    // Since we are re-using fields which are defined for the node, we need to
    // remove any additional view modes which don't belong to avoid E_NOTICE errors.
    $instance['display'] = array_intersect_key($instance['display'], array_flip(array('default', 'full')));
    $instance['entity_type'] = 'taxonomy_term';
    $instance['bundle'] = 'gallery_collections';
    $taxonomy_instances['taxo_term_' . $key] = $instance;
  }

  switch ($group) {
    case 'node':
      return $node_instances;
    case 'taxonomy_term':
      return $taxonomy_instances;
    default:
      return $node_instances + $taxonomy_instances;
  }
}

/**
 * Create a field, unless it exists already.
 *
 * Note that it's not necessary to check field type here, as that's done in the
 * requirements step.
 *
 * @param $field
 *   The field definition.
 */
function _media_gallery_ensure_field($field) {
  $existing_field = field_info_field($field['field_name']);
  if (empty($existing_field)) {
    field_create_field($field);
  }
}

function _media_gallery_ensure_instance($instance) {
  $existing_instance = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
  if (empty($existing_instance)) {
    field_create_instance($instance);
  }
}

/**
 * Returns definitions for instances this module requires on media bundles.
 */
function _media_required_instances() {
  $t = get_t();
  $media_instances = array(
    'media_title' => array(
      'field_name' => 'media_title',
      'label' => $t('Title'),
      'display' => array(
        'default' => array('type' => 'hidden'),
        'media_gallery_thumbnail' => array('type' => 'text_default', 'label' => 'hidden'),
        'media_gallery_lightbox' => array('type' => 'text_default', 'label' => 'hidden'),
        'media_gallery_detail' => array('type' => 'text_default', 'label' => 'hidden'),
      ),
    ),
    'media_description' => array(
      'field_name' => 'media_description',
      'label' => $t('Description'),
      'widget' => array(
        'type' => 'text_textarea',
        'settings' => array('rows' => 4),
      ),
      'display' => array(
        'default' => array('type' => 'hidden'),
        'media_gallery_thumbnail' => array('type' => 'text_default', 'label' => 'hidden'),
        'media_gallery_lightbox' => array('type' => 'text_default', 'label' => 'hidden'),
        'media_gallery_detail' => array('type' => 'text_default', 'label' => 'hidden'),
      ),
    ),
    'field_tags' => array(
      'field_name' => 'field_tags',
      'label' => $t('Tags'),
      'widget' => array(
        'type' => 'taxonomy_autocomplete',
      ),
      'display' => array(
        'default' => array('type' => 'hidden'),
      ),
    ),
    'field_license' => array(
      'field_name' => 'field_license',
      'label' => $t('License settings for this image'),
      'required' => TRUE,
      'default_value' => array(
        array('value' => 'nothing'),
      ),
      'description' => $t('Select a <a href="http://creativecommons.org" target="_new">Creative Commons</a> license for others who use this image. Or change the <a href="@gallery_settings">default license</a> used for uploaded images.', array('@gallery_settings' => url('admin/config/media/galleries'))),
      'display' => array(
        'default' => array('type' => 'hidden'),
        'media_gallery_thumbnail' => array('type' => 'list_default', 'label' => 'hidden'),
        'media_gallery_lightbox' => array('type' => 'list_default', 'label' => 'hidden'),
        'media_gallery_detail' => array('type' => 'list_default', 'label' => 'hidden'),
      ),
    ),
  );
  return $media_instances;
}

/**
 * Make sure the field_tags field exists and is of the right type.
 */
function _media_gallery_ensure_field_tags() {
  // Make sure the 'tags' vocabulary exists.
  $vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  if (!$vocabulary) {
    $description = st('Use tags to group articles on similar topics into categories.');
    $help = st('Enter a comma-separated list of words to describe your content.');
    $vocabulary = (object) array(
      'name' => 'Tags',
      'description' => $description,
      'machine_name' => 'tags',
      'help' => $help,
    );
    taxonomy_vocabulary_save($vocabulary);
  }

  $field = array(
    'field_name' => 'field_tags',
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vid' => $vocabulary->vid,
          'parent' => 0,
        ),
      ),
    ),
  );
  _media_gallery_ensure_field($field);
}

/**
 * Makes sure media entities have the fields media gallery requires.
 */
function _media_gallery_ensure_media_instances() {
  $t = get_t();
  $instances = _media_required_instances();
  foreach (media_type_get_types() as $bundle => $type) {
    foreach ($instances as $instance) {
      $instance_copy = $instance;
      $instance_copy += array(
        'entity_type' => 'media',
        'bundle' => $bundle,
      );
      if ($instance_copy['field_name'] == 'field_tags' && !isset($instance_copy['description'])) {
        $label = in_array($bundle, array('image', 'audio', 'video')) ? $bundle : 'file';
        $instance_copy['description'] = $t("Enter a comma-separated list of words to describe your $label.");
      }
      _media_gallery_ensure_instance($instance_copy);
    }
  }
}

/**
 * Helper function to create required taxonomy vocabulary.
 */
function media_gallery_create_taxonomy_vocab() {
  $t = get_t();
  $vocabulary = (object) array(
    'name' => 'Gallery collections',
    'description' => $t('Groups of rich media galleries'),
    'machine_name' => 'gallery_collections',
  );
  
  taxonomy_vocabulary_save($vocabulary);
  variable_set('media_gallery_collection_vid', $vocabulary->vid);
  return $vocabulary;
}

/**
 * Helper function to create required taxonomy term.
 */
function media_gallery_create_taxonomy_term($vocabulary) {
  // Create a taxonomy term for the "All Galleries" collection.
  $term = new stdClass();
  $term->vid = $vocabulary->vid;
  $term->name = 'Galleries';
  $term->description = '';
  // Choose a text format that will prevent WYSIWYGs from appearing by default.
  // When we allow people to create new gallery collections we'll have to
  // (carefully) modify the form for adding new ones also.
  $term->format = filter_fallback_format();
  $term->path = array('alias' => 'galleries');
  // Save the term, preventing Pathauto from aliasing it incorrectly.
  _media_gallery_prevent_unwanted_pathauto_aliases();
  taxonomy_term_save($term);
  _media_gallery_allow_all_pathauto_aliases();

  // Create a menu link for this taxonomy term. We set the link title to
  // 'Taxonomy term' in order to match the title of the corresponding router
  // item, since this is what triggers the menu system to display a dynamic
  // title for the link.
  $menu_item = array(
    'menu_name' => 'main-menu',
    'weight' => 10,
    'link_title' => 'Taxonomy term',
    'link_path' => 'taxonomy/term/' . $term->tid,
  );
  menu_link_save($menu_item);

  // Save the term ID for future use.
  variable_set('media_gallery_default_collection_tid', $term->tid);
}

/**
 * Implements hook_uninstall().
 */
function media_gallery_uninstall() {
  // Delete all existing galleries.
  $nids = db_query('SELECT nid FROM {node} n WHERE n.type = :type', array(':type' => 'media_gallery'))->fetchCol();
  node_delete_multiple($nids);

  // Delete fields and instances.
  foreach (array_keys(_media_gallery_controlled_fields()) as $field) {
    field_delete_field($field);
  }
  $instances = _media_gallery_controlled_instances();
  $instances += field_info_instances('node', 'media_gallery');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete the content type itself.
  // @todo: We can't run this since the content type already ceased to exist
  //   when the module was disabled. But we'd like to be able to, so that the
  //   proper hooks within node_type_delete() get fired.
  // node_type_delete('media_gallery');

  // Delete the taxonomy vocabulary.
  $vid = variable_get('media_gallery_collection_vid');
  if ($vid && function_exists('taxonomy_vocabulary_delete')) {
    taxonomy_vocabulary_delete($vid);
  }

  // Delete variables for the media gallery node type.
  variable_del('node_submitted_media_gallery');
  variable_del('node_options_media_gallery');
  variable_del('comment_media_gallery');
  variable_del('media_gallery_collection_vid');
  variable_del('media_gallery_default_collection_tid');
}
